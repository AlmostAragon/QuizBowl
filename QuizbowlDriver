import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.nio.file.*;
import java.io.*;
import java.lang.*;
import java.nio.charset.StandardCharsets;

public class QuizBowlDriver{
    public static void main(String[] args){
        System.out.print('\u000C');
        int choice;
        boolean run = true, noMoreClues = false, answerSelected = false, displayAnswer = false, displayNoAnswerSelected = false, displayClues = false;
        boolean importMenu = false;
        ArrayList<String> clueList = new ArrayList<String>();
        AnswerLine answerLine = null;
        Path dir = Paths.get("C:\\Quizbowl");
        Scanner scan = new Scanner(System.in);
        while(run==true){
            
            //Regular menu
            if(importMenu==false){
                //No Answer Selected cases
                if(displayNoAnswerSelected==false && (displayAnswer==true || answerSelected==false)){
                    try{
                        answerLine.getAnswer();
                    }catch(NullPointerException x){
                        System.out.println("No Answer Selected");
                        displayNoAnswerSelected = true;
                    }
                }
                
                //List of Clues, if applicable
                if(displayClues==true){
                    for(String clue: clueList){
                        if(!clue.equals("")){
                            System.out.println(clue);
                        }    
                    }
                }
                
                //Answer, if applicable
                if(displayAnswer==true){
                    try{
                        System.out.println("ANSWER: " + answerLine.getAnswer());
                    }catch(NullPointerException x){
                        System.out.print("");
                        displayAnswer = false;
                    }
                }
                
                //New Clue
                if(noMoreClues==false){
                    System.out.print("1. New Clue");
                }else{
                    System.out.print("No More Clues");
                }
                
                //New Answer Line
                System.out.println("\n2. New Answer Line");
                
                //Show Answer
                System.out.println("3. Show Answer");
                
                //End
                System.out.println("4. End");
                
                //Import
                System.out.println("5. Import Menu");
            }    
            
            //ImportMenu
            else{
                //Back
                System.out.println("6. Back");
                
                //Add Answer
                System.out.println("7. Add Answer");
                
                //Add Clue
                System.out.println("8. Add Clue");
            }
            
            //Menu things
            choice = Integer.parseInt(scan.nextLine());   
            System.out.print('\u000C');
            displayNoAnswerSelected = false;
            
            
            //Menu Options
            
            //New Clue
            if(importMenu==false && choice==1){
                displayClues = true;
                String newClue = "";
                try{
                    newClue = answerLine.newClue();
                    if(newClue.charAt(newClue.length()-1)=='$'){
                        clueList.add((newClue.substring(0, newClue.length()-1)));
                        noMoreClues = true;
                    }else{
                        clueList.add(newClue);
                    }
                }catch(NullPointerException x){
                    System.out.println("No Answer Selected");
                    displayNoAnswerSelected = true;
                }catch(StringIndexOutOfBoundsException x){
                    System.out.print(newClue);
                }
            }
            
            //New Answer
            if(importMenu==false && choice==2){
                displayClues = false;
                clueList.clear();
                //vv Temporary vv
                dir = Paths.get("C:\\Quizbowl\\Literature\\RussianLit\\RussianSS").toAbsolutePath();//Replace this later with the actual starting file
                //^^ Temporary ^^
                ArrayList<Path> currentDirectoryStream = new ArrayList<Path>(); //ArrayList representing all of the elements inside the lowest directory of the path
                boolean isDirectory = true;
                int selection;
                displayAnswer = false;
                //Go through Quizbowl folder, picking random folders until there are only files in the folder. The path to that folder is the answerline.
                while(isDirectory==true){
                    try{
                        DirectoryStream<Path> stream = Files.newDirectoryStream(dir);
                        for(Path item: stream){
                            currentDirectoryStream.add(item);       //add every item inside the lowest directory of pathToAnswerLine into an ArrayList
                        }
                        if(Files.isDirectory(currentDirectoryStream.get(0))==true){
                            selection = ((int)Math.ceil(Math.random()*currentDirectoryStream.size()))-1; //picks a random number of an item in the directory
                            dir = Paths.get(dir.toString() + "\\" + currentDirectoryStream.get(selection).getFileName()); //string path of current + filename of random one
                            currentDirectoryStream.clear();                               //clears the ArrayList of contents of current directory
                        }else{
                            isDirectory = false;                                    //will end the loop                            
                        }    
                    }catch(IOException | DirectoryIteratorException x){
                        System.out.println(x);
                    }
                }
                answerLine = new AnswerLine(dir);                                   //makes the answerline object out of the path to a lowest level directory
                if(answerLine.getNumClues()==0){
                    noMoreClues = true;
                }else{
                    noMoreClues = false;
                }   
                answerSelected = true;
                //Literally what happens with choice 1, copied down here
            }
            
            //Show Answer
            if(importMenu==false && choice==3){
                displayAnswer = true;
                answerSelected = false;
            }
            
            //End
            if(importMenu==false && choice==4){
                run = false;
            }
            
            //Import (Menu to Import)
            if(importMenu==false && choice==5){
                importMenu = true;
            }
            
            //Back (Import to Menu)
            if(importMenu==true && choice==6){
                importMenu = false;
            }
            if(importMenu==true && choice==7){
                String directory, answer, category;
                AnswerLine current;
                Path pathToAnswer, pathToDescription;
                System.out.println("6. Back\nEnter category for this answer:");
                directory = scan.nextLine();
                ArrayList<String> text = new ArrayList<String>();
                if(!directory.equals("6")){
                    System.out.println("Enter answer line:");
                    answer = scan.nextLine();
                    if(!answer.equals("6")){
                        System.out.println("Enter description of answer:");
                        category = scan.nextLine();
                        if(!category.equals("6")){
                            try{
                                current = new AnswerLine(directory);
                                pathToAnswer = Paths.get(current.getAnswerLinePath().toString() + "\\" + answer);
                                Files.createDirectory(pathToAnswer);
                                current = new AnswerLine(pathToAnswer);
                                pathToDescription = Paths.get(current.getAnswerLinePath().toString() + "\\" + "Description.txt");
                                text.add(answer);
                                text.add(category);
                                Files.write(pathToDescription, text, StandardCharsets.UTF_8);
                            }catch(IOException e){
                                System.out.println(e);
                            }    
                        }
                    }
                }
                System.out.print('\u000C');
            }
            if(importMenu==true && choice==8){
                String text = "", directory = "";
                AnswerLine current;
                System.out.println("6. Back\nEnter name of answer:");
                directory = scan.nextLine();
                System.out.print('\u000C');
                if(!directory.equals("6")){
                    while(!text.equals("6")){
                        current = new AnswerLine(directory);
                        System.out.println("6. Back\nEnter text for clue:");
                        text = scan.nextLine();
                        if(!text.equals("6")){
                            current.refreshClueArrayList();
                            current.addClue(text);
                        }
                        System.out.print('\u000C');
                        if(!text.equals("6")){
                            System.out.println("Clue Added");
                        }    
                    }
                }    
            }
        }    
    }
}

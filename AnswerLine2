import java.nio.file.*;
import java.nio.charset.*;
import java.util.*;
import java.io.*;

public class AnswerLine {
    private Path pathTo; //Path to answer line directory
    private String answer, description; //Contains actual answer and answer type
    private int numClues; //# of .txt clue files inside selected answer line directory
    private Path pathToClue; //Holds path to current clue
    private Path pathToDescription; //Holds path to Description.txt that exists inside every answer line directory
    private List<String> descriptionList = new ArrayList<String>(); //For reading contents of Description.txt
    private int count; //# of times newClue has been called
    private ArrayList<String> clueArrayList = new ArrayList<String>(); //Holds all possible clues for the answer line
    
    public AnswerLine(Path path){
        pathTo = path.toAbsolutePath(); //Stores absolute path
        pathToDescription = Paths.get(pathTo.toString()+Paths.get("\\Description.txt"));
        try {
            descriptionList = Files.readAllLines(pathToDescription,StandardCharsets.UTF_8);
            answer = descriptionList.get(0);
            description = descriptionList.get(1);
        }catch (IOException e){
            System.out.println(e);
        } //Reads Description.txt for answer and description
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(pathTo)){
            for (Path clue: stream){
                if(!clue.getFileName().toString().equals("Description.txt")){//File is not description, so it is a clue
                    try {
                        List<String> currentClue = new ArrayList<String>();
                        currentClue = Files.readAllLines(clue,StandardCharsets.UTF_8);
                        clueArrayList.add(currentClue.get(0));//Write each clue to clueArrayList
                    }catch (IOException e){
                        System.out.println(e);
                    }
                }
            }
        }catch (IOException | DirectoryIteratorException x) {
            System.out.println(x);
        }
        numClues = clueArrayList.size();
    }
    
    public Path getAnswerLinePath(){
        return pathTo;
    }
    public String getAnswer(){
        return answer;
    }
    public String getDescription(){
        return description;
    }
    public int getNumClues(){
        return numClues;
    }
    public String newClue(){
        int randElement = ((int)Math.ceil(Math.random()*clueArrayList.size()))-1;
        String ret;
        try{
            ret = clueArrayList.get(randElement);
        }catch(ArrayIndexOutOfBoundsException x){
            return "";
        }    
        count++;
        if(count == numClues){
            ret += "$";
        }
        clueArrayList.remove(randElement);
        return ret;
    }
    public void addClue(String newClue){
        pathToClue = Paths.get(pathTo.toString()+Paths.get("\\Clue"+(numClues+1+".txt")));
        List<String> clueText = Arrays.asList(newClue);
        try {
            Files.write(pathToClue, clueText, StandardCharsets.UTF_8);
        }catch (IOException e){
            System.out.println(e);
            }
        clueArrayList.clear();
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(pathTo)){
            for (Path clue: stream){
                if(!clue.getFileName().toString().equals("Description.txt")){//File is not description, so it is a clue
                    try {
                        List<String> currentClue = new ArrayList<String>();
                        currentClue = Files.readAllLines(clue,StandardCharsets.UTF_8);
                        clueArrayList.add(currentClue.get(0));//Write each clue to clueArrayList
                    }catch (IOException e){
                        System.out.println(e);
                    }
                }
            }
        }catch (IOException | DirectoryIteratorException x) {
            System.out.println(x);
        }
	}
}
